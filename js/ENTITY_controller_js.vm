#set( $tools = $loader.newInstance("Tools") )
#set( $uncapitalizedEntityName = $entity.name.toLowerCase() )
#set( $_= "$" )
##--------------------------------------------------------------------------------------------------------
##--------------------------------------------------------------------------------------------------------
## Key fields = fields in Primary Key    
#set( $keyFields = $entity.keyAttributes )
##--------------------------------------------------------------------------------------------------------
## Data fields = fields not in Primary Key    
#set( $dataFields = $entity.nonKeyAttributes )
##--------------------------------------------------------------------------------------------------------
## All fields ( ordered fiels : 1) fields in Primary Key 2) fields not in primary key    
#set( $allFields = $fn.concatLists($keyFields, $dataFields) )
##--------------------------------------------------------------------------------------------------------
'use strict';

/* Controller for ${entity.name} */

myAppControllers.controller('${entity.name}Ctrl', ['${entity.name}', '${_}scope', '${_}routeParams', '${_}http', '${_}location', function(${entity.name}, ${_}scope, ${_}routeParams, ${_}http, ${_}location) {
	
	var entityURL = baseURL + '/${tools.uncapitalize($entity.name)}';
	
    // mode
    ${_}scope.mode = null;
    
	// data
    ${_}scope.${entity.name.toLowerCase()}s = {list: []};
    ${_}scope.${entity.name.toLowerCase()} = undefined;
    
    // success
    ${_}scope.successs = {list: []};
    ${_}scope.addSuccess = function(success) {
        ${_}scope.successs.list.push(success);
    };
	
	// errors
    ${_}scope.errors = {list: []};
    ${_}scope.addError = function(error) {
        ${_}scope.errors.list.push(error);
    };
	${_}scope.manageError = function(data, status, headers, config) {
		if( status === 404 ) {
			if( data === null || data === "" ) {
				${_}scope.addError('The server is not responding');
			} else {
				${_}scope.addError('Invalid URL : ' + config.url);
			}
		} else {
        	if( data !== null && data !== "" ) {
            	${_}scope.addError(data);
        	}
		}
    };
    
    // location
    ${_}scope.refresh${entity.name}List = function() {
        ${_}scope.clean${entity.name}sInScope();
        ${_}scope.getAll(${_}scope.setAll${entity.name}sInScope);
    }
    ${_}scope.goTo${entity.name}List = function() {
        ${_}scope.refresh${entity.name}List();
        ${_}location.path('/${entity.name.toLowerCase()}');
    }
    ${_}scope.refresh${entity.name} = function(${tools.keysAsString(${entity}, ', ', '', '')}) {
        ${_}scope.clean${entity.name}InScope();
        ${_}scope.getOne(${tools.keysAsString(${entity}, ', ', '', '')}, ${_}scope.setOne${entity.name}InScope);
    }
    ${_}scope.goTo${entity.name} = function(${tools.keysAsString(${entity}, ', ', '', '')}) {
        ${_}scope.refresh${entity.name}(${tools.keysAsString(${entity}, ', ', '', '')});
        ${_}location.path('/${entity.name.toLowerCase()}/'+${tools.keysAsString(${entity}, "+'/'+", '', '')});
    }

	// display
	${_}scope.cleanMessage = function() {
        ${_}scope.successs.list = [];
        ${_}scope.errors.list = [];
    };
    ${_}scope.clean${entity.name}sInScope = function() {
        ${_}scope.${entity.name.toLowerCase()}s.list = [];
    };
    ${_}scope.clean${entity.name}InScope = function() {
        ${_}scope.${entity.name.toLowerCase()} = undefined;
    };
    ${_}scope.setAll${entity.name}sInScope = function(${entity.name.toLowerCase()}s) {
        ${_}scope.${entity.name.toLowerCase()}s.list = ${entity.name.toLowerCase()}s;
    };
    ${_}scope.add${entity.name}InScope = function(${entity.name.toLowerCase()}) {
        ${_}scope.${entity.name.toLowerCase()}s.list.push(${entity.name.toLowerCase()});
    };
    ${_}scope.setOne${entity.name}InScope = function(${entity.name.toLowerCase()}) {
        ${_}scope.${entity.name.toLowerCase()} = ${entity.name.toLowerCase()};
    };
    
    // data
    ${_}scope.getAll = function(callbackSuccess) {
        ${_}http({method: 'GET', url: entityURL}).
        success(function(data, status, headers, config) {
            callbackSuccess(data);
        }).
        error(${_}scope.manageError);
    };
    ${_}scope.getOne = function(${tools.keysAsString(${entity}, ', ', '', '')}, callbackSuccess) {
        if( ${tools.keysAsString(${entity}, ' || ', '', " === 'new'")} ) {
            return;
        }
        var url = entityURL + '/' + ${tools.keysAsString($entity, " + '/' + ", "", "")};
        ${_}http({method: 'GET', url: url}).
        success(function(data, status, headers, config) {
            callbackSuccess(data);
        }).
        error(${_}scope.manageError);
    };
    ${_}scope.saveOne = function(${entity.name.toLowerCase()}, callbackSuccess) {
        var url = entityURL;
        var method;
#foreach( $attribute in $entity.keyAttributes )
        if( ${entity.name.toLowerCase()}.${attribute.name} == undefined || ${entity.name.toLowerCase()}.${attribute.name} == '' ) {
			${_}scope.addError('${attribute.name} is not defined');
			return;
		}
#end
		if( ${_}scope.mode === 'create' ) {
            method = 'POST';
        } else {
            url += '/' + ${tools.keysAsString($entity, " + '/' + ", "$entity.name.toLowerCase().", "")};
            method = 'PUT';
        }
        ${_}http({method: method, url: url, data: ${entity.name.toLowerCase()}, headers: {'Content-Type': 'application/json'}}).
        success(function(data, status, headers, config) {
			${_}scope.addSuccess('save ok');
            callbackSuccess(${entity.name.toLowerCase()});
        }).
        error(${_}scope.manageError);
    };
    ${_}scope.deleteOne = function(${tools.keysAsString(${entity}, ', ', '', '')}, callbackSuccess) {
        var url = entityURL + '/' + ${tools.keysAsString($entity, " + '/' + ", "", "")};
        ${_}http({method: 'DELETE', url: url}).
        success(function(data, status, headers, config) {
			${_}scope.addSuccess('delete ok');
            callbackSuccess(data);
        }).
        error(${_}scope.manageError);
    };
        
    // Actions
    ${_}scope.save = function() {
		${_}scope.cleanMessage();
        ${_}scope.saveOne(${_}scope.${entity.name.toLowerCase()}, ${_}scope.setOne${entity.name}InScope);
    };
    ${_}scope.delete = function(${tools.keysAsString(${entity}, ', ', '', '')}) {
		${_}scope.cleanMessage();
        ${_}scope.deleteOne(${tools.keysAsString(${entity}, ', ', '', '')}, ${_}scope.goTo${entity.name}List);
    };
    
    // Main

	${_}scope.cleanMessage();
    
    if( ${_}location.path().endsWith('/new') ) {
        ${_}scope.mode = 'create';
        ${_}scope.bookorderitem = undefined;
    } else if( ${tools.keysAsString($entity, ' && ', '$routeParams.', ' !== undefined')} ) {
		${_}scope.refresh${entity.name}(${tools.keysAsString(${entity}, ', ', '$routeParams.', '')});
    } else {
        ${_}scope.refresh${entity.name}List();
    }
    
    
}]);
